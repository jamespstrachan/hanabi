#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Fri Mar  2 14:54:12 2018
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don





#####################################################  2 player local
set timeout -1
spawn python play_hanabi.py FfBux --auto
match_max 100000
expect -exact "Play (l)ocal, (r)emote or (b)ot game?"
send -- "l\r"
expect -exact "Player 1 press enter"
send -- "\r"
expect -exact "(p)lay, (d)iscard, (i)nform? "
send -- "i1\r"
expect -exact "Player 2 press enter"
send -- "\r"
expect -exact "(p)lay, (d)iscard, (i)nform? "
send -- "pa\r"
expect -exact "Player 1 press enter"
send -- "\r"
expect -exact "(p)lay, (d)iscard, (i)nform? "
send -- "dd\r"
expect -exact "Player 2 press enter"
send -- "\r"
expect -exact "(p)lay, (d)iscard, (i)nform? "
send -- "i\r"
expect -exact "inform of 1, 2, 4, 5, (g)reen, (r)ed, (y)ellow? "
send -- "b\r"
expect -exact "inform of 1, 2, 4, 5, (g)reen, (r)ed, (y)ellow? "
send -- "y\r"
expect -exact "Player 1 press enter"
send -- "\r"
expect -exact "(p)lay, (d)iscard, (i)nform? "
send -- "i"
expect -exact " "
send -- "d\r"
expect -exact "which card to use, a-e? "
send -- "c\r"
expect -exact "Player 2 press enter"
send -- "\r"
expect -exact "(p)lay, (d)iscard, (i)nform? "
send -- "p\r"
expect -exact "which card to use, a-e? "
send -- "p\r"
expect -exact "which card to use, a-e? "
send -- "a\r"
expect -exact "Player 1 press enter"
send -- "\n"

#####################################################  3 player remote-mock as player 3

set timeout -1
spawn python play_hanabi.py FfBux --auto
match_max 100000
expect -exact "Play (l)ocal, (r)emote or (b)ot game?"
send -- "rt\r"
expect -exact "What's your name? "
send -- "James\r"
expect -exact " - (n) create new game? "
send -- "1\r"
expect -exact "(p)lay, (d)iscard, inform Player (1), Player (2)? "
send -- "11"
expect -exact " "
send -- ""
expect -exact " "
send -- "31\r"
expect -exact "(p)lay, (d)iscard, inform Player (1), Player (2)? "
send -- "dd\r"
expect -exact "(p)lay, (d)iscard, inform Player (1), Player (2)? "

#####################################################  4 player remote-mock as player 1

set timeout -1
spawn python play_hanabi.py FfBux --auto
match_max 100000
expect -exact "Play (l)ocal, (r)emote or (b)ot game?"
send -- "rt\r"
expect -exact "What's your name? "
send -- "Destroyer\r"
expect -exact "- (n) create new game? "
send -- "n\r"
expect -exact "how many players (2-5)? "
send -- "4\r"
expect -exact "(p)lay, (d)iscard, inform Player (2), Player (3), Player (4)? "
send -- "21\r"
expect -exact "(p)lay, (d)iscard, inform Player (2), Player (3), Player (4)? "
send -- "dd"
expect -exact " "
send -- ""
expect -exact " "
send -- "pe\r"
expect -exact "(p)lay, (d)iscard, inform Player (2), Player (3), Player (4)? "

#####################################################  A 10 cycle bot test

set timeout -1
spawn python play_hanabi.py aaaaa
match_max 100000
expect -exact "Play (l)ocal, (r)emote or (b)ot game? "
send -- "b\r"
expect -exact "how many reps? "
send -- "10\r"
expect -exact "Which bot to use? "
send -- "0\r"
expect -exact "How many instances of HanabiBasicBot (2-5)? "
send -- "2\r"
expect eof

